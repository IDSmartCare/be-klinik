default:
  image: docker:24.0.5

variables:
    DOCKER_TLS_CERTDIR: ""  # Tidak menggunakan TLS untuk Docker Machine Executor
    DOCKER_HOST: tcp://dockerhost:2375
    DOCKER_DRIVER: overlay2
    RELEASE_VER: $CI_COMMIT_BRANCH-$CI_COMMIT_SHA
    RELEASE_VER_PRE: $CI_COMMIT_BRANCH-$CI_COMMIT_SHA-pre
    IMAGE_TAG: $CI_REG_URL/$CI_REG_PROJECT_PATH/$CI_REG_PROJECT_NAME:$RELEASE_VER
    IMAGE_TAG_PRE: $CI_REG_URL/$CI_REG_PROJECT_PATH/$CI_REG_PROJECT_NAME:$RELEASE_VER_PRE
    IMAGE_TAG_LATEST: $CI_REG_URL/$CI_REG_PROJECT_PATH/$CI_REG_PROJECT_NAME:latest

services:
  - name: docker:24.0.5-dind
    alias: dockerhost
    command:
      - /bin/sh
      - -c
      - dockerd-entrypoint.sh --mtu=1300 || exit

before_script:
  - echo $DOCKER_HOST
#  - apk update && apk add docker docker-compose && /etc/init.d/docker start
  - docker version
  - cat /etc/*ease   
  - ps -ef
  - docker ps
  - hostname
  - df -hT
  - until docker info; do sleep 1; done
  - echo "Login to Docker registry..."
  - echo "$CI_REG_SANDY" | docker login -u "$CI_REG_USER" --password-stdin "$CI_REG_URL"
  
after_script:
  - docker logout

stages:
  - build
  - test
  - release
  - deploy

build-app:
  stage: build
  script:
    - echo "Building Docker image..."
    - docker build -t "$IMAGE_TAG_PRE" . -f Dockerfile
    - docker push "$IMAGE_TAG_PRE"

test-curl:
  stage: test
  script:
    - echo "Testing $CI_REG_PROJECT_NAME connectivity using cURL..."
    - docker network create net-$CI_REG_PROJECT_NAME
    - docker run --network=net-$CI_REG_PROJECT_NAME -d --name $CI_REG_PROJECT_NAME $IMAGE_TAG_PRE
    - sleep 10
    - docker exec $CI_REG_PROJECT_NAME curl -vvv --fail http://127.0.0.1:80/
    - docker stop $CI_REG_PROJECT_NAME
    - docker network rm net-$CI_REG_PROJECT_NAME
  allow_failure: true  # Pipeline tidak akan gagal meskipun job ini gagal


test-direct:
  stage: test
  script:
    - docker pull "$IMAGE_TAG_PRE"
    - docker run -d --name "$CI_REG_PROJECT_NAME" "$IMAGE_TAG_PRE"
    - docker commit "$CI_REG_PROJECT_NAME" "$IMAGE_TAG_PRE-direct"
    - docker push "$IMAGE_TAG_PRE-direct"

release:
  stage: release
  script:
    - docker pull "$IMAGE_TAG_PRE"
    - docker run -d --name "$CI_REG_PROJECT_NAME" "$IMAGE_TAG_PRE"
    - docker commit "$CI_REG_PROJECT_NAME" "$IMAGE_TAG"
    - docker push "$IMAGE_TAG"
    - docker commit "$CI_REG_PROJECT_NAME" "$IMAGE_TAG_LATEST"
    - docker push "$IMAGE_TAG_LATEST"

deploy-charta:
  stage: deploy
  script:
    - echo "Deploying $CI_REG_PROJECT_NAME to production..."
    - apk add curl
    - echo "Validating required environment variables..."
    - echo "Using DEPLOYMENT_API ":"" "$DEPLOYMENT_CHARTA"
    - echo "Using RNC_TOKEN ":"" "(hidden)"
    - echo "Using IMAGE_TAG ":"" "$IMAGE_TAG"
    - >
      if [ -z "$DEPLOYMENT_CHARTA" ] || [ -z "$TOKEN_CHARTA" ] || [ -z "$IMAGE_TAG" ]; then
      echo "Error: Required environment variables are not set." >&2;
      exit 1;
      fi
    - echo "Downloading deployment script..."
    - >
      curl --fail -o /tmp/curl-deploy.sh https://gitlab.com/go-public1/ci-library/-/raw/main/script-deployment-k8s.sh ||
      { echo "Error: Failed to download deployment script." >&2; exit 1; }
    - echo "Customizing deployment script..."
    - sed -i "s|DEPLOYMENT_API|$DEPLOYMENT_CHARTA|g" /tmp/curl-deploy.sh
    - sed -i "s|AUTHTOKEN|$TOKEN_CHARTA|g" /tmp/curl-deploy.sh
    - sed -i "s|IMAGETAG|$IMAGE_TAG|g" /tmp/curl-deploy.sh
    - chmod +x /tmp/curl-deploy.sh
    - cat /tmp/curl-deploy.sh
    - echo "Executing deployment script..."
    - sh /tmp/curl-deploy.sh
#  when: manual # Deployment dilakukan manual


deploy-charta-api:
  stage: deploy
  script:
    - echo "Deploying $CI_REG_PROJECT_NAME to production..."
    - apk add curl
    - echo "Validating required environment variables..."
    - echo "Using DEPLOYMENT_API ":"" "$DEPLOYMENT_CHARTA_API"
    - echo "Using RNC_TOKEN ":"" "(hidden)"
    - echo "Using IMAGE_TAG ":"" "$IMAGE_TAG"
    - >
      if [ -z "$DEPLOYMENT_CHARTA_API" ] || [ -z "$TOKEN_CHARTA" ] || [ -z "$IMAGE_TAG" ]; then
      echo "Error: Required environment variables are not set." >&2;
      exit 1;
      fi
    - echo "Downloading deployment script..."
    - >
      curl --fail -o /tmp/curl-deploy.sh https://gitlab.com/go-public1/ci-library/-/raw/main/script-deployment-k8s.sh ||
      { echo "Error: Failed to download deployment script." >&2; exit 1; }
    - echo "Customizing deployment script..."
    - sed -i "s|DEPLOYMENT_API|$DEPLOYMENT_CHARTA_API|g" /tmp/curl-deploy.sh
    - sed -i "s|AUTHTOKEN|$TOKEN_CHARTA|g" /tmp/curl-deploy.sh
    - sed -i "s|IMAGETAG|$IMAGE_TAG|g" /tmp/curl-deploy.sh
    - chmod +x /tmp/curl-deploy.sh
    - cat /tmp/curl-deploy.sh
    - echo "Executing deployment script..."
    - sh /tmp/curl-deploy.sh
#  when: manual # Deployment dilakukan manual

deploy-trias:
  stage: deploy
  script:
    - echo "Deploying $CI_REG_PROJECT_NAME to production..."
    - apk add curl
    - echo "Validating required environment variables..."
    - echo "Using DEPLOYMENT_API ":"" "$DEPLOYMENT_TRIAS"
    - echo "Using RNC_TOKEN ":"" "(hidden)"
    - echo "Using IMAGE_TAG ":"" "$IMAGE_TAG"
    - >
      if [ -z "$DEPLOYMENT_TRIAS" ] || [ -z "$TOKEN_TRIAS" ] || [ -z "$IMAGE_TAG" ]; then
      echo "Error: Required environment variables are not set." >&2;
      exit 1;
      fi
    - echo "Downloading deployment script..."
    - >
      curl --fail -o /tmp/curl-deploy.sh https://gitlab.com/go-public1/ci-library/-/raw/main/script-deployment-k8s.sh ||
      { echo "Error: Failed to download deployment script." >&2; exit 1; }
    - echo "Customizing deployment script..."
    - sed -i "s|DEPLOYMENT_API|$DEPLOYMENT_TRIAS|g" /tmp/curl-deploy.sh
    - sed -i "s|AUTHTOKEN|$TOKEN_TRIAS|g" /tmp/curl-deploy.sh
    - sed -i "s|IMAGETAG|$IMAGE_TAG|g" /tmp/curl-deploy.sh
    - chmod +x /tmp/curl-deploy.sh
    - cat /tmp/curl-deploy.sh
    - echo "Executing deployment script..."
    - sh /tmp/curl-deploy.sh
#  when: manual # Deployment dilakukan manual

deploy-puspoll:
  stage: deploy
  script:
    - echo "Deploying $CI_REG_PROJECT_NAME to production..."
    - apk add curl
    - echo "Validating required environment variables..."
    - echo "Using DEPLOYMENT_API ":"" "$DEPLOYMENT_PUSPOLL"
    - echo "Using RNC_TOKEN ":"" "(hidden)"
    - echo "Using IMAGE_TAG ":"" "$IMAGE_TAG"
    - >
      if [ -z "$DEPLOYMENT_PUSPOLL" ] || [ -z "$TOKEN_PUSPOLL" ] || [ -z "$IMAGE_TAG" ]; then
      echo "Error: Required environment variables are not set." >&2;
      exit 1;
      fi
    - echo "Downloading deployment script..."
    - >
      curl --fail -o /tmp/curl-deploy.sh https://gitlab.com/go-public1/ci-library/-/raw/main/script-deployment-k8s.sh ||
      { echo "Error: Failed to download deployment script." >&2; exit 1; }
    - echo "Customizing deployment script..."
    - sed -i "s|DEPLOYMENT_API|$DEPLOYMENT_PUSPOLL|g" /tmp/curl-deploy.sh
    - sed -i "s|AUTHTOKEN|$TOKEN_PUSPOLL|g" /tmp/curl-deploy.sh
    - sed -i "s|IMAGETAG|$IMAGE_TAG|g" /tmp/curl-deploy.sh
    - chmod +x /tmp/curl-deploy.sh
    - cat /tmp/curl-deploy.sh
    - echo "Executing deployment script..."
    - sh /tmp/curl-deploy.sh
#  when: manual # Deployment dilakukan manual